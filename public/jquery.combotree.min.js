!function(e){function t(n){if(o[n])return o[n].exports;var a=o[n]={exports:{},id:n,loaded:!1};return e[n].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){e.exports=o(1)},function(e,t){"use strict";!function(e){var t={init:function(o){return this.each(function(){var n={slideDur:400},a=e.extend({},n,o),i=e(this);for(var s in a)i.data(s,a[s]);e(i.data("element")).addClass("combotree"),t.renderField(i),e(document).bind("mouseup",t.onWindowMouseUp),e.extend(e.expr[":"],{containsIN:function(e,t,o){return(e.innerText||"").toLowerCase().indexOf((o[3]||"").toLowerCase())>=0}})})},renderField:function(o){o.data("label")&&e('<label class="combotree__label" for="combotree__search">'+o.data("label")+"</label>").appendTo(e(o.data("element")));var n=e('<div class="combotree__field"></div>').appendTo(e(o.data("element")));o.data("label")||n.addClass("without-label");var a=o.data("placeholder")||"",i=e('<input id="combotree__input" class="combotree__input" type="search" placeholder="'+a+'">').appendTo(n).bind("keyup",t.onInputChange);e('<button class="combotree__btn" type="button">').appendTo(n).bind("click",t.onSelectClick);var s=o.data("listHeight")||"240";if(e('<div class="combotree__list-wrapper"></div>').appendTo(e(o.data("element"))).css("max-height",s+"px"),o.data("value")){var r=t.findDefaultItem(o.data("data").children,o.data("value"));i.val(r.name)}},renderList:function(e){t.renderNodes(e.data("data").children,e.find(".combotree__list-wrapper"))},renderNodes:function(o,n){o&&!function(){var a=e('<ul class="combotree__list"></ul>');a.appendTo(n),o.sort(function(e,t){var o=e.name.toUpperCase(),n=t.name.toUpperCase();return o<n?-1:o>n?1:0}),o.forEach(function(e){n=t.renderItem(e.name,a,!e.children),t.renderNodes(e.children,n)})}()},renderItem:function(t,o,n){var a=n?"combotree__item_last-level":"",i=e('<li class="combotree__item '+a+'">'+t+"</li>");return i.appendTo(o),i},showList:function(o){var n=o.data("listHeight")||"240";o.offset().top+o.height()+ +n<e(window).height()?o.find(".combotree__list-wrapper").slideDown(o.data("slideDur")).bind("click",t.onItemClick):o.find(".combotree__list-wrapper").addClass("openToTop").slideDown(o.data("slideDur")).bind("click",t.onItemClick),t.renderList(o);var a=o.find(".combotree__input").val();""!==a&&t.searchItem(a,o),o.addClass("open")},hideList:function(e){e.find(".combotree__list-wrapper").slideUp(e.data("slideDur")).unbind("click",t.onItemClick),e.find(".combotree__list-wrapper").children().removeClass("open").removeClass("hidden"),setTimeout(function(){e.removeClass("open"),e.find(".combotree__list-wrapper").removeClass("openToTop").children().remove()},550)},searchItem:function(t,o){o.find('.combotree__item_last-level:containsIN("'+t+'")').addClass("search-result"),o.find(".search-result").each(function(){e(this).parents(".combotree__item").each(function(){e(this).addClass("open")}),e(this).parents(".combotree__list").each(function(){e(this).addClass("open")})})},findDefaultItem:function(e,o){for(var n=0;n<e.length;n++){if(e[n].id===o)return e[n];if(e[n].children){var a=t.findDefaultItem(e[n].children,o);if(a)return a}}return null},showListNoResultText:function(t){t.find(".combotree__list-wrapper").children().hasClass("hidden")&&!t.find(".combotree__search_no-result").length&&e('<p class="combotree__search_no-result">Ничего не найдено</p>').appendTo(t.find(".combotree__list-wrapper"))},hideListOptionsNotComplySearchConditions:function(o){o.find(".combotree__item_last-level").each(function(){e(this).hasClass("search-result")||e(this).addClass("hidden")}),o.find(".combotree__list").each(function(){t.hideListEmptyParents(e(this))}),o.find(".combotree__item").not(".combotree__item_last-level").each(function(){t.hideListEmptyParents(e(this))})},hideListEmptyParents:function(t){var o=!1;t.find(".combotree__item_last-level").each(function(){if(e(this).hasClass("search-result"))return o=!0,!1}),o||t.removeClass("open").addClass("hidden")},resetSearchResult:function(e){e.find(".combotree__list").removeClass("hidden"),e.find(".combotree__item").removeClass("hidden"),e.find(".combotree__item_last-level").removeClass("search-result"),e.find(".combotree__search_no-result").remove()},onInputChange:function(o){var n=e(o.target),a=e(o.target).parents(".combotree");0===n.val().length?a.hasClass("open")&&t.resetSearchResult(a):a.hasClass("open")?(t.resetSearchResult(a),t.searchItem(n.val(),a),t.hideListOptionsNotComplySearchConditions(a),t.showListNoResultText(a)):(t.showList(a),t.searchItem(n.val(),a),t.hideListOptionsNotComplySearchConditions(a),t.showListNoResultText(a))},onSelectClick:function(o){o.preventDefault();var n=e(o.target).parents(".combotree");n.hasClass("open")?t.hideList(n):t.showList(n)},onItemClick:function(o){o.stopPropagation();var n=e(o.target),a=n.parents(".combotree");n.hasClass("combotree__item")&&(n.hasClass("combotree__item_last-level")?(a.find(".combotree__input").val(n.text()),t.hideList(a)):(o.stopPropagation(),n.hasClass("open")?(n.children().slideUp(a.data("slideDur")),setTimeout(function(){n.removeClass("open")},400)):(n.children().slideDown(a.data("slideDur")),n.addClass("open"))))},onWindowMouseUp:function(o){0===e(".combotree.open").has(o.target).length&&t.hideList(e(".combotree.open"))}};e.fn.combotree=function(e){return t.init.apply(this,arguments)}}(jQuery)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,